{"ast":null,"code":"import { setToken } from '../utils/token';\nexport const BASE_URL = 'https://auth.nomoreparties.co';\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(response => {\n    try {\n      if (response.status === 201) {\n        return response.json();\n      }\n    } catch (error) {\n      console.log(error);\n      history.push('/signin');\n      setSuccess(true);\n      setInfoToolTipOpen(true);\n      return error;\n    }\n  }).then(res => {\n    return res;\n  }).catch(error => console.log(error));\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(response => {\n    try {\n      if (response.status === 200) {\n        return response.json();\n      }\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n  }).then(data => {\n    if (data) {\n      setToken(data.token);\n      return data;\n    } else {\n      return;\n    }\n  }).catch(err => console.log(err));\n};\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(res => res.json()).then(data => data);\n};","map":{"version":3,"sources":["/Users/boris/dev/react-mesto-auth/src/components/Auth.js"],"names":["setToken","BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","response","status","json","error","console","log","history","push","setSuccess","setInfoToolTipOpen","res","catch","authorize","data","token","err","checkToken"],"mappings":"AAAA,SAASA,QAAT,QAAyB,gBAAzB;AAEA,OAAO,MAAMC,QAAQ,GAAG,+BAAjB;AAEP,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAf;AAN2B,GAAvB,CAAL,CAQNO,IARM,CAQAC,QAAD,IAAc;AAClB,QAAI;AACF,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA4B;AAC1B,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;AACF,KAJD,CAIE,OAAMC,KAAN,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAG,MAAAA,OAAO,CAACC,IAAR,CAAa,SAAb;AACEC,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAC,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACF,aAAQN,KAAR;AACD;AACF,GApBM,EAqBNJ,IArBM,CAqBAW,GAAD,IAAS;AACb,WAAOA,GAAP;AACD,GAvBM,EAwBNC,KAxBM,CAwBCR,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAxBX,CAAP;AAyBD,CA1BM;AA4BP,OAAO,MAAMS,SAAS,GAAG,CAACrB,KAAD,EAAQC,QAAR,KAAqB;AAC5C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAf;AAN2B,GAAvB,CAAL,CAQNO,IARM,CAQAC,QAAD,IAAc;AAClB,QAAI;AACF,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA4B;AAC1B,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;AACF,KAJD,CAIE,OAAMC,KAAN,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAQA,KAAR;AACD;AACF,GAjBM,EAkBNJ,IAlBM,CAkBAc,IAAD,IAAU;AACd,QAAGA,IAAH,EAAS;AACPzB,MAAAA,QAAQ,CAACyB,IAAI,CAACC,KAAN,CAAR;AACA,aAAOD,IAAP;AACD,KAHD,MAGO;AACL;AACD;AACF,GAzBM,EA0BNF,KA1BM,CA0BAI,GAAG,IAAIX,OAAO,CAACC,GAAR,CAAYU,GAAZ,CA1BP,CAAP;AA2BD,CA5BM;AA8BP,OAAO,MAAMC,UAAU,GAAIF,KAAD,IAAW;AACnC,SAAOrB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AACnCK,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,kBAFT;AAGP,uBAAkB,UAASmB,KAAM;AAH1B;AAF0B,GAAzB,CAAL,CAQNf,IARM,CAQDW,GAAG,IAAIA,GAAG,CAACR,IAAJ,EARN,EASNH,IATM,CASDc,IAAI,IAAIA,IATP,CAAP;AAUD,CAXM","sourcesContent":["import { setToken } from '../utils/token';\n\nexport const BASE_URL = 'https://auth.nomoreparties.co';\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({email, password})\n  })\n  .then((response) => {\n    try {\n      if (response.status === 201){\n        return response.json();\n      }\n    } catch(error){\n      console.log(error)\n      history.push('/signin');\n        setSuccess(true);\n        setInfoToolTipOpen(true);\n      return (error)\n    }\n  })\n  .then((res) => {\n    return res;\n  })\n  .catch((error) => console.log(error));\n};\n\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({email, password})\n  })\n  .then((response) => {\n    try {\n      if (response.status === 200){\n        return response.json();\n      }\n    } catch(error){\n      console.log(error)\n      return (error)\n    }\n  })\n  .then((data) => {\n    if(data) {\n      setToken(data.token);\n      return data;\n    } else {\n      return;\n    }\n  })\n  .catch(err => console.log(err))\n};\n\nexport const checkToken = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    }\n  })\n  .then(res => res.json())\n  .then(data => data)\n}"]},"metadata":{},"sourceType":"module"}